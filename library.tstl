# Import the classes to be tested
from library import Library, Book

# Initialization and shared state
library = None
books_added = 0

def init_library():
    """Initialize the library and reset state variables."""
    global library, books_added
    library = Library()
    books_added = 0

# Actions
def add_book(title: str, author: str, isbn: str, year: int, price: float):
    """Add a book to the library."""
    global books_added
    book = Book(title, author, isbn, year, price)
    library.add_book(book)
    books_added += 1

def remove_book(isbn: str):
    """Remove a book by its ISBN."""
    global books_added
    library.remove_book(isbn)
    books_added = max(0, books_added - 1)

def search_books_by_title(title: str):
    """Search for books by title."""
    try:
        books = library.search_by_title(title)
        assert all(isinstance(book, Book) for book in books)
    except Exception as exc:
        print(f"Exception during search_books_by_title: {exc}")

def search_books_by_author(author: str):
    """Search for books by author."""
    try:
        books = library.search_by_author(author)
        assert all(isinstance(book, Book) for book in books)
    except Exception as exc:
        print(f"Exception during search_books_by_author: {exc}")

def display_all_books():
    """Display all books in the library."""
    try:
        library.display_all_books()
    except Exception as exc:
        print(f"Exception during display_all_books: {exc}")

def sort_books_by_price():
    """Sort books by their price."""
    try:
        library.sort_by_price()
    except Exception as exc:
        print(f"Exception during sort_books_by_price: {exc}")

def sort_books_by_year():
    """Sort books by their publication year."""
    try:
        library.sort_by_year()
    except Exception as exc:
        print(f"Exception during sort_books_by_year: {exc}")

def display_total_books():
    """Display the total number of books."""
    try:
        total = len(library.books)
        assert total == books_added
        library.display_total_books()
    except Exception as exc:
        print(f"Exception during display_total_books: {exc}")

def clear_all_books():
    """Clear all books from the library."""
    global books_added
    try:
        library.clear_books()
        books_added = 0
    except Exception as exc:
        print(f"Exception during clear_all_books: {exc}")

def save_books_to_file(filename: str):
    """Save all books to a file."""
    try:
        library.save_books_to_file(filename)
    except Exception as exc:
        print(f"Exception during save_books_to_file: {exc}")

def load_books_from_file(filename: str):
    """Load books from a file."""
    try:
        library.load_books_from_file(filename)
    except Exception as exc:
        print(f"Exception during load_books_from_file: {exc}")

def display_book_by_isbn(isbn: str):
    """Display details of a book by its ISBN."""
    try:
        book = library.display_book_by_isbn(isbn)
        if book:
            assert isinstance(book, Book)
    except Exception as exc:
        print(f"Exception during display_book_by_isbn: {exc}")

def update_book_details(isbn: str, title: str = None, author: str = None, year: int = None, price: float = None):
    """Update a book's details."""
    try:
        book = Book(title or "", author or "", isbn, year or 0, price or 0.0)
        library.update_book_details(isbn, book)
    except Exception as exc:
        print(f"Exception during update_book_details: {exc}")

# Initial action to set up the state
init_library()
