# TSTL Harness for Testing the Library Management System

# Define the program under test (SUT) - Library
sut = Library()  # Correctly initialize Sut as an instance of Library

# Procedure to add a book to the library
procedure add_book(title, author, isbn, year, price):
    sut.add_book(Book(title, author, isbn, year, price))

# Procedure to remove a book by ISBN
procedure remove_book(isbn):
    sut.remove_book(isbn)

# Procedure to search for books by title
procedure search_by_title(title):
    return sut.search_by_title(title)

# Procedure to sort books by price (ascending)
procedure sort_books_by_price():
    sut.sort_by_price()

# Procedure to sort books by year (ascending)
procedure sort_books_by_year():
    sut.sort_by_year()

# Procedure to update book details (title, author, year, price)
procedure update_book(isbn, new_title, new_author, new_year, new_price):
    sut.update_book_details(isbn, new_title, new_author, new_year, new_price)

# Test case 1: Add a book and verify its existence
test add_book_test:
    add_book("The Great Gatsby", "F. Scott Fitzgerald", "ISBN123", 1925, 10.99)
    assert sut.books contains Book("The Great Gatsby", "F. Scott Fitzgerald", "ISBN123", 1925, 10.99)

# Test case 2: Remove a book and verify its removal
test remove_book_test:
    add_book("1984", "George Orwell", "ISBN124", 1949, 8.99)
    remove_book("ISBN124")
    assert sut.books does not contain Book("1984", "George Orwell", "ISBN124", 1949, 8.99)

# Test case 3: Search for a book by title and verify result
test search_books_by_title_test:
    add_book("To Kill a Mockingbird", "Harper Lee", "ISBN125", 1960, 7.99)
    results = search_by_title("Mockingbird")
    assert results contains Book("To Kill a Mockingbird", "Harper Lee", "ISBN125", 1960, 7.99)

# Test case 4: Ensure multiple books with the same title are handled properly in search
test search_books_by_title_multiple_results:
    add_book("The Catcher in the Rye", "J.D. Salinger", "ISBN126", 1951, 9.99)
    add_book("The Catcher in the Rye", "J.D. Salinger", "ISBN127", 1951, 9.99)
    results = search_by_title("Catcher")
    assert length(results) == 2

# Test case 5: Sorting books by price and verifying order
test sort_books_by_price_test:
    add_book("Book A", "Author A", "ISBN128", 2020, 20.00)
    add_book("Book B", "Author B", "ISBN129", 2021, 5.00)
    sort_books_by_price()
    assert sut.books[0].price == 5.00
    assert sut.books[1].price == 20.00

# Test case 6: Sorting books by year and verifying order
test sort_books_by_year_test:
    add_book("Book X", "Author X", "ISBN130", 2019, 10.00)
    add_book("Book Y", "Author Y", "ISBN131", 2022, 15.00)
    sort_books_by_year()
    assert sut.books[0].year == 2019
    assert sut.books[1].year == 2022

# Test case 7: Test updating book details (title, author, year, price)
test update_book_details_test:
    add_book("Old Title", "Old Author", "ISBN132", 2000, 5.99)
    update_book("ISBN132", "New Title", "New Author", 2024, 12.99)
    assert sut.books[0].title == "New Title"
    assert sut.books[0].author == "New Author"
    assert sut.books[0].year == 2024
    assert sut.books[0].price == 12.99

# Test case 8: Remove a book that doesn't exist (edge case)
test remove_nonexistent_book_test:
    remove_book("NonexistentISBN")
    assert length(sut.books) == 0  # Assert that no book is removed if non-existent

# Test case 9: Ensure adding the same book multiple times doesn't duplicate it
test add_duplicate_book_test:
    add_book("Unique Book", "Unique Author", "ISBN133", 2023, 19.99)
    add_book("Unique Book", "Unique Author", "ISBN133", 2023, 19.99)
    assert length(sut.books) == 1

# Test case 10: Test handling of empty library (no books)
test empty_library_test:
    assert length(sut.books) == 0

# Test case 11: Add multiple books and then remove them all
test remove_all_books_test:
    add_book("Book A", "Author A", "ISBN134", 2023, 10.99)
    add_book("Book B", "Author B", "ISBN135", 2022, 12.99)
    remove_book("ISBN134")
    remove_book("ISBN135")
    assert length(sut.books) == 0
