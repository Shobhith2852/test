# Import the library module
@import library

# Define pools for testing
pool: <library> 1
pool: <book> 4
pool: <int> 4
pool: <float> 4

# Raw Python code block for helper functions and setup
<@
def generate_unique_isbn():
    return f"ISBN-{hash(str(GEN_INT))}"
@>

# Initialize the Library
<library> := library.Library()

# Integer ranges for year and price generation
<int> := <[1900..2024]>
<float> := <[0..1000]>

# Book creation action
<book> := library.Book("Book " + str(<int>), 
                       "Author " + str(<int>), 
                       generate_unique_isbn(), 
                       <int>, 
                       float(<float>))

# Actions for library management
<action>
<library>.add_book(<book>)
</action>

<action>
len(<library>.books) > 0 -> <library>.remove_book(<library>.books[0].isbn)
</action>

<action>
len(<library>.books) > 0 -> <library>.search_by_title(<library>.books[0].title)
</action>

<action>
len(<library>.books) > 0 -> <library>.search_by_author(<library>.books[0].author)
</action>

<action>
<library>.sort_by_price()
</action>

<action>
<library>.sort_by_year()
</action>

<action>
len(<library>.books) > 0 -> <library>.display_book_by_isbn(<library>.books[0].isbn)
</action>

<action>
len(<library>.books) > 0 -> \
    <library>.update_book_details(<library>.books[0].isbn, \
    library.Book("Updated Book " + str(<int>), \
                 "Updated Author " + str(<int>), \
                 <library>.books[0].isbn, \
                 <int>, \
                 float(<float>)))
</action>

<action>
<library>.display_total_books()
</action>

<action>
<library>.clear_books()
</action>

# Optional file saving/loading (with error handling)
<action>
try:
    <library>.save_books_to_file("temp_library.txt")
except Exception:
    pass
</action>

<action>
try:
    <library>.load_books_from_file("temp_library.txt")
except Exception:
    pass
</action>

# Validators
<def>
def valid(s):
    return True
</def>

# Preconditions (optional)
<precondition>
len(<library>.books) >= 0
</precondition>
