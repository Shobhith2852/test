@import os
@import math

# Declare pools with a specific number of items
pool: <Library> 1  # One library instance
pool: <Book> 3     # Three book instances

# Below is a larger block of raw python code, in <@...@> (put these on their own line), defining some functions used in testing
<@
# These are helper functions that you can use in your TSTL tests.

def display_books(sut):
    sut.display_all_books()

def save_books_to_file(sut, filename):
    sut.save_books_to_file(filename)

def load_books_from_file(sut, filename):
    sut.load_books_from_file(filename)
@>

# Declare the Library object pool
<Library(1)> := Library()

# Declare Book object pool with 3 entries
<Book(1)> := Book("The Great Gatsby", "F. Scott Fitzgerald", "9780743273565", 1925, 10.99)
<Book(2)> := Book("1984", "George Orwell", "9780451524935", 1949, 9.99)
<Book(3)> := Book("To Kill a Mockingbird", "Harper Lee", "9780061120084", 1960, 14.99)

# Add books to the library
~<Library(1)>.add_book(<Book(1)>) => \
   len(<Library(1)>.books) == pre<(len(<Library(1)>.books))> + 1

~<Library(1)>.add_book(<Book(2)>) => \
   len(<Library(1)>.books) == pre<(len(<Library(1)>.books))> + 1

~<Library(1)>.add_book(<Book(3)>) => \
   len(<Library(1)>.books) == pre<(len(<Library(1)>.books))> + 1

# Search for books by title and ensure there are matching results
~<Library(1)>.search_by_title("1984") => \
   len(pre<(<Library(1)>.search_by_title("1984"))>) > 0

# Remove a book from the library by ISBN
~<Library(1)>.remove_book("9780743273565") => \
   len(<Library(1)>.books) == pre<(len(<Library(1)>.books))> - 1

# Sort books by price
~<Library(1)>.sort_by_price() => \
   pre<( <Library(1)>.books[0].price )> <= <Library(1)>.books[0].price

# Save and load books to/from a file
<Library(1)>.display_total_books()
<Library(1)>.display_all_books()

~<Library(1)>.save_books_to_file("books.txt")
~<Library(1)>.clear_books()

~<Library(1)>.load_books_from_file("books.txt")
~<Library(1)>.display_total_books()

# User-defined guard to display books only if there are more than 2 books
len(<Library(1)>.books) > 2 -> <Library(1)>.display_all_books()

# Compare actions with a reference implementation
reference: Book ==> Book
reference: Library ==> Library
reference: add_book ==> add
reference: remove_book ==> discard
reference: search_by_title ==> search
reference: sort_by_price ==> sorted
reference: save_books_to_file ==> save
reference: load_books_to_file ==> load

# Method reference shorthand for comparing method calls and function calls
reference: METHOD(display_all_books) ==> CALL(display_books)
reference: METHOD(save_books_to_file) ==> CALL(save_books_to_file)
reference: METHOD(load_books_from_file) ==> CALL(load_books_from_file)
