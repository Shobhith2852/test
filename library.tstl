@import book import Book
@import library import Library

# Define the system under test
< library = Library() >

# Actions to test the library management system
<action>
library.add_book(Book("Test Title " + str(GEN_INT), "Test Author " + str(GEN_INT), "ISBN-" + str(GEN_INT), GEN_YEAR, GEN_FLOAT))
</action>

<action>
if library.books:
    library.remove_book(library.books[0].isbn)
</action>

<action>
if library.books:
    library.search_by_title(library.books[0].title)
</action>

<action>
if library.books:
    library.search_by_author(library.books[0].author)
</action>

<action>
library.sort_by_price()
</action>

<action>
library.sort_by_year()
</action>

<action>
library.display_all_books()
</action>

<action>
library.display_total_books()
</action>

# Special action for updating book details
<action>
if library.books:
    book_to_update = library.books[0]
    library.update_book_details(book_to_update.isbn, 
        Book("Updated Title " + str(GEN_INT), 
             "Updated Author " + str(GEN_INT), 
             book_to_update.isbn, 
             GEN_YEAR, 
             GEN_FLOAT))
</action>

# Temporary file actions (with error handling)
<action>
try:
    library.save_books_to_file("temp_library.txt")
except Exception:
    pass
</action>

<action>
try:
    library.load_books_from_file("temp_library.txt")
except Exception:
    pass
</action>

<action>
library.clear_books()
</action>

# Validators to check system state
<def>
def valid(s):
    return True
</def>

# Preconditions for actions
<precondition>
library.books or len(library.books) > 0
</precondition>

# Generators for test data
GEN_INT = int
GEN_FLOAT = float
GEN_YEAR = int
GEN_STR = str
