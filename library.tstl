@import library

<@
from random import choice, uniform

# Helper function to generate random strings
def random_string(length=5):
    import string
    import random
    return ''.join(random.choices(string.ascii_letters, k=length))

# Helper function to generate random floats
def random_float(min_value=1.0, max_value=100.0):
    return round(uniform(min_value, max_value), 2)
@>

# Initialize pools
pool: <library.Library> 1 OPAQUE
pool: <library.Book> 5 OPAQUE
pool: <str> 10
pool: <int> 5
pool: <float> 5

# Initialize properties to check after each step
property: len(<library.Library>.books) >= 0
property: all(isinstance(book, library.Book) for book in <library.Library>.books)

# Initialize actions
# Create a Library object
<library.Library> := library.Library()

# Generate random strings
<str> := CALL(random_string)

# Generate random integers (years)
<int> := <[1900..2023]>

# Generate random floats (prices)
<float> := CALL(random_float)

# Create a Book object
<library.Book> := library.Book(<str>, <str>, <str>, <int>, <float>)

# Add a book to the library
<library.Library>.add_book(<library.Book>)

# Remove a book by ISBN
<library.Library>.remove_book(<library.Book>.isbn)

# Search books by title
<library.Library>.search_by_title(<str>)

# Search books by author
<library.Library>.search_by_author(<str>)

# Sort books by price
<library.Library>.sort_by_price()

# Sort books by year
<library.Library>.sort_by_year()

# Display all books
<library.Library>.display_all_books()

# Save books to a file
<library.Library>.save_books_to_file("test_library.txt")

# Load books from a file
<library.Library>.load_books_from_file("test_library.txt")

# Display a book by ISBN
<library.Library>.display_book_by_isbn(<library.Book>.isbn)

# Clear all books
<library.Library>.clear_books()

# Display total books
<library.Library>.display_total_books()

# Update book details
<library.Library>.update_book_details(
    <library.Book>.isbn,
    library.Book(<str>, <str>, <str>, <int>, <float>)
)

# Properties for validation after actions
property: len(<library.Library>.books) >= 0
property: all(isinstance(book, library.Book) for book in <library.Library>.books)
